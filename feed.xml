<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-11-12T23:56:00-08:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Running Rails On Docker Without Breaching the Hull</title>
    <link rel="alternate" href="http://blog.url.com/2015/11/13/running-docker-without-breaching-the-hull.html"/>
    <id>http://blog.url.com/2015/11/13/running-docker-without-breaching-the-hull.html</id>
    <published>2015-11-12T23:56:00-08:00</published>
    <updated>2015-11-16T01:17:18-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;As part of my exploration of a minimum set of devops tools, I&amp;rsquo;ve been learning
how to stack containers full of Rails apps onto the Docker.  There are plenty of
examples of how to get started with Rails and Postgres on Docker, even one &lt;a href="https://docs.docker.com/compose/rails/"&gt;from
the whale&amp;rsquo;s mouth&lt;/a&gt;, as it were. Working
from this example, it was pretty clear to me that one of Docker&amp;rsquo;s major
strengths is that it makes it &lt;em&gt;really, really easy&lt;/em&gt; to get something running
with a minimum of fuss; it took all of about a half day to learn enough Docker
to hoist anchor, and even tweak a few things to my liking. One thing kept nagging
me about the Docker example, though, and that was a warning from &lt;code&gt;bundler&lt;/code&gt; when
running &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Oh Noes, a Warnthing?!&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Don&amp;#39;t run Bundler as root.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Running &lt;code&gt;bundler&lt;/code&gt; in this way strikes me as a needless security risk (why sudo
when you can suDON&amp;rsquo;T PRIVILEGE ESCALATION EXPLOIT YOURSELF), so I set about
modifying the example file to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;shut it up and&lt;/li&gt;
&lt;li&gt;learn some more about Docker.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;ll admit, depending upon your tolerance for warning messages, this kind of
minutiae may not even show up on your radar. And let me be clear that &lt;strong&gt;this
post is not a knock against the Docker team&lt;/strong&gt; for this &amp;ldquo;flaw&amp;rdquo; in the example;
they&amp;rsquo;re doing absolutely amazing stuff by building Docker in the first place and
they &lt;a href="https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/"&gt;absolutely give a
damn&lt;/a&gt;
&lt;a href="https://github.com/docker/docker/issues/13490"&gt;about security&lt;/a&gt;. As mentioned in
the intro, this is more about learning Docker by addressing this (arguably
security-oriented) warning.&lt;/p&gt;

&lt;h2&gt;The :egg:sample From the Dockermentation&lt;/h2&gt;

&lt;p&gt;For reference, the example Dockerfile looks like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
FROM ruby:2.2.0
RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y build-essential libpq-dev
RUN mkdir /myapp
WORKDIR /myapp
ADD Gemfile /myapp/Gemfile
ADD Gemfile.lock /myapp/Gemfile.lock
RUN bundle install
ADD . /myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s unpack this a bit before moving on (for a more in-depth explanation, head
over to the &lt;a href="https://docs.docker.com/compose/rails/"&gt;docs themselves&lt;/a&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pull the base image for Ruby 2.2.0.&lt;/li&gt;
&lt;li&gt;Update and install some packages with &lt;code&gt;apt-get&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make a new directory and work out of it.&lt;/li&gt;
&lt;li&gt;Copy over a seed Gemfile(.lock).&lt;/li&gt;
&lt;li&gt;Install with bundler (&lt;strong&gt;THE OFFENDING LINE :scream:&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Bake&amp;rdquo; the now-bundled app into the container.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Look At Me I Can Docker Too&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ln5Ar5aHDYM?t=12s"&gt;I Will Do It Nine Times&lt;/a&gt;. Okay, actually
only one time I will do it:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
FROM ruby:2.2.3
RUN apt-get update -qq
RUN apt-get install -y build-essential libpq-dev

RUN mkdir /app
WORKDIR /app
ADD . /app

RUN useradd -ms /bin/bash rails
RUN chown -R rails:rails .

USER rails

ENV GEM_HOME /home/rails/.gems
RUN gem install bundler
RUN bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How is this more different than before, hmm?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;rails&lt;/code&gt; user is created and used to install gems with bundler and then run
the application. No More Sudo Bundle:no_good:. That being said, this still needs to
be updated to include something like Nginx as a proxy to get around the
limitation of being unable to start Rails on port 80 without &lt;code&gt;sudo&lt;/code&gt;. To be
addressed&amp;hellip;&lt;/li&gt;
&lt;li&gt;The Rails app is &amp;ldquo;newed&amp;rdquo; prior to spinning up the app for the first time.
This avoids the need to make the placeholder Gemfile as in the Docker
example, and IMHO, feels like it more clearly separates the containerization
step from the source code implementation step.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Dockered&lt;/h1&gt;

&lt;p&gt;And there you have it. With a few minor tweaks to the Dockerfile, bundler has
been silenced, and the deployment configuration uses a dedicated, unprivileged
user for managing package installation and starting the relevant app. What&amp;rsquo;s
more is that it accomplishes this while both leveraging the base Ruby image on
Docker Hub and avoiding the overhead of RVM or rbenv. All in all, this very
particular goal really helped to clarify my understanding of Docker, from
permissions all the way to source code copying.  Not least of all, this leaves
me feeling a bit more at-ease, knowing that there is one less way to succumb to
some as-yet unknown vulnerability in Docker whilst running errant &lt;code&gt;sudo&lt;/code&gt;
commands in Dockerfiles.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Emulate Default Scope with Around Filter and Scoping</title>
    <link rel="alternate" href="http://blog.url.com/2015/08/21/emulate-default-scope-with-around-filter-and-scoping.html"/>
    <id>http://blog.url.com/2015/08/21/emulate-default-scope-with-around-filter-and-scoping.html</id>
    <published>2015-08-20T20:04:00-07:00</published>
    <updated>2015-08-20T22:03:56-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;We all know that &lt;a href="http://rails-bestpractices.com/posts/2013/06/15/default_scope-is-evil/"&gt;&lt;code&gt;default_scope&lt;/code&gt; is
evil&lt;/a&gt;.
But sometimes, you really &lt;em&gt;do&lt;/em&gt; want to make sure that a condition is &lt;em&gt;almost&lt;/em&gt;
always applied to the queries for a particular model. Draft vs. published posts,
approved vs. unapproved content, soft deletes, cat videos vs. not-cat videos,
etc., etc.  What&amp;rsquo;s a well-behaved Rails developer to do?  Recently, I
encountered this exact issue on a project I was working on, and was not
satisfied with the choice between Being Evil &amp;agrave; la &lt;code&gt;default_scope&lt;/code&gt; or
being repetitive and scattering &lt;code&gt;where(whatever: true)&lt;/code&gt; conditions throughout
the code.  After some searching, I came across a combination of methods that
accomplishes essentially the same goal without all of the bizarre side effects
of &lt;code&gt;default_scope&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Le Hypothetical Situation&lt;/h2&gt;

&lt;p&gt;Imagine that we want to build a blogging platform in Rails with the usual
draft-before-publish workflow. Basically, we want to make sure that drafts only
ever show up when an admin is logged in. The first solution that comes to mind
for a problem like this is to chuck the condition into a &lt;code&gt;default_scope&lt;/code&gt; on your
model:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;default_scope&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;draft: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I won&amp;rsquo;t rehash the challenges of using &lt;code&gt;default_scope&lt;/code&gt; in this post; give the
Rails Best Practices link at the top of this post a good read and you should at
least get the general idea that there are a lot of weird things to account for
with this approach.&lt;/p&gt;

&lt;h2&gt;Le Alternative Different&lt;/h2&gt;

&lt;p&gt;Enter &lt;code&gt;after_filter&lt;/code&gt; and &lt;code&gt;scoping&lt;/code&gt;. Below is a simple example of using this
approach in the &lt;code&gt;ApplicationController&lt;/code&gt; to accomplish the same draft filtering:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;protect_from_forgery&lt;/span&gt; &lt;span class="ss"&gt;with: :exception&lt;/span&gt;

  &lt;span class="n"&gt;around_filter&lt;/span&gt; &lt;span class="ss"&gt;:scope_to_published&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scope_to_published&lt;/span&gt;
    &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;draft: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;scoping&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This results in the &lt;code&gt;Post&lt;/code&gt; model being &amp;ldquo;globally&amp;rdquo; scoped before running the rest
of the controller method. Since it happens in the &lt;code&gt;ApplicationController&lt;/code&gt;, it
will apply to all subclassed controllers. (Worth noting is that &lt;code&gt;where(draft:
false)&lt;/code&gt; can of course be converted to an equivalent scope named &lt;code&gt;published&lt;/code&gt; or
some such.) Using this approach, and some thoughtful placement in the controller
hieararchy, it is possible to increase or decrease the granularity of a
&amp;ldquo;default&amp;rdquo; condition. It is easy to imagine having an &lt;code&gt;AdminController&lt;/code&gt; that does
not inherit from &lt;code&gt;ApplicationController&lt;/code&gt; and would therefore not be subject to
this global scoping. Alternatively, a &lt;code&gt;skip_filter&lt;/code&gt; directive could be added
only to those controllers where this scoping should not apply. In the direction
of more specificity, the &lt;code&gt;around_filter&lt;/code&gt; could be moved further down the class
hierarchy and explicitly applied to the &lt;code&gt;PostsController&lt;/code&gt; or any number of
related controllers.&lt;/p&gt;

&lt;h1&gt;Un Caveat&lt;/h1&gt;

&lt;p&gt;As a disclaimer, I have not benchmarked the effect this might have at the
&lt;code&gt;ApplicationController&lt;/code&gt; level. I would guess that in the best case, it should
incur no more performance overhead than an explicit &lt;code&gt;where&lt;/code&gt; clause, and in
the worst case, it would incur a trivial impact more than made up for by
conciseness. Can&amp;rsquo;t say for certain without running benchmarks, but I invite any
interested readers to share any findings or insights they might have in this
regard.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Keeping Your App from Flying Off of the Rails with BDD - Part 1 of Question Mark</title>
    <link rel="alternate" href="http://blog.url.com/2015/08/16/keeping-your-app-from-flying-off-of-the-rails-with-bdd-part-1.html"/>
    <id>http://blog.url.com/2015/08/16/keeping-your-app-from-flying-off-of-the-rails-with-bdd-part-1.html</id>
    <published>2015-08-16T16:59:00-07:00</published>
    <updated>2015-08-17T23:34:28-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;The following blarg assumes working knowledge of user story mapping, user
stories, and other such techniques of Le M&amp;eacute;thode Agile.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Through a nigh omniscient understanding of the needs of The Cash Cat, your
product team has painstakingly produced a sublime list of :sparkles:User
Stories:sparkles:, seemingly from thin air. Trusting the Wisdom of the Ancients,
the development team has chosen to ride the Rails of Ruby forward into
user-acquisition glory. How can we ensure that their vision of the app is
executed flawlessly?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1&gt;:tada:Skynet:tada:&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;JK.&lt;/p&gt;

&lt;p&gt;What we will do is set up tools (&lt;em&gt;Rails, RSpec, Capybara, FactoryGirl, and
Guard, to be precise&lt;/em&gt;) and a workflow for building our app using behavior-driven
development.  This isn&amp;rsquo;t a guarantee per se that we will deliver literally
&lt;em&gt;flawless&lt;/em&gt; code, any more than flossing is a guarantee that we&amp;rsquo;ll never get
cavities. &lt;strong&gt;HOWEVER&lt;/strong&gt; structuring our app in this way does give us much better
odds of producing robust, low-defect code that delivers on the requirements we
set out to build.&lt;/p&gt;

&lt;h5&gt;&lt;em&gt;Before we go any further:&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;If you are the kind of person who hates to read, you can jump straight over to
the &lt;a href="https://github.com/BlakeTidwell/cash_cats"&gt;demo repo&lt;/a&gt; for this blog post
and download everything there, even though it will make me cry. But we both know
you&amp;rsquo;re not that kind of person, right? :cry:&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;So What Are We Building, Exactly?&lt;/h2&gt;

&lt;p&gt;Mantra-like, the steady rhythm of &lt;em&gt;&amp;ldquo;As a Cash Cat&amp;rdquo;&lt;/em&gt; droning in
your mind&amp;rsquo;s eye, you mentally intone The Stories in preparation for your
upcoming sprint:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a Cash Cat, so that I can claim my rightful place on the Interwebs, I can
sign up for a Cash Cats account when I first visit the site.&lt;/p&gt;

&lt;p&gt;As a Cash Cat, so that I can recall my mind-numbingly vast sums of cash, I can
log into my Cash Cat account.&lt;/p&gt;

&lt;p&gt;As a Cash Cat, so that I can show off my wads of dough, I can record my cash
when logged in.&lt;/p&gt;

&lt;p&gt;As a Cash Cat&amp;hellip;&lt;/p&gt;

&lt;p&gt;As a Cash Cat&amp;hellip;&lt;/p&gt;

&lt;p&gt;As a Cash Cat&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="image-wrapper"&gt;
  &lt;img alt="Double digit user acquisition rates got me eatin dis here cash money."
       src="/images/eating_munniez.jpg" /&gt;
  &lt;blockquote&gt;
    Sorry, got a little carried away there. Eating dis money nao.
  &lt;/blockquote&gt;
&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s get our project set up to test and implement these simple features.&lt;/p&gt;

&lt;h2&gt;Putting Stuff Together&lt;/h2&gt;

&lt;p&gt;Start out by laying down some fresh Rails to start driving this train into the
future:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new cash_cats
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Installing the Test Suite&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s first switch everything over to RSpec by adding a few gems, and also add
Capybara Webkit for Javascript and browser testing:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Gemfile&lt;/span&gt;
&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rspec-rails'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'factory_girl_rails'&lt;/span&gt;
  &lt;span class="c1"&gt;# For dummy data&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'faker'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'database_cleaner'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'capybara-webkit'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the command-line, we bundle, set up RSpec, and remove the (now) unused
&lt;code&gt;test&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;bundle
&lt;span class="gp"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails generate rspec:install
&lt;span class="gp"&gt;$ &lt;/span&gt;rm -rf &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, modify the Rails spec helper to use both Database Cleaner and Capybara
Webkit. The boilerplate for Database Cleaner shown below can be found in
&lt;a href="https://github.com/DatabaseCleaner/database_cleaner#rspec-with-capybara-example"&gt;the README for the repo&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/rails_helper.rb&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="no"&gt;Capybara&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;javascript_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:webkit&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# Other stuff.&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_transactional_fixtures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:suite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clean_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:truncation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:js&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="ss"&gt;:truncation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:transaction&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;DatabaseCleaner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="c1"&gt;# Maybe some more other stuff.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, if you run &lt;code&gt;rake&lt;/code&gt; from the root of the project, you should see
some output indicating that RSpec is running, albeit with &lt;code&gt;0 examples&lt;/code&gt; as the
result. One last bit of cleanup before we move on is to update the generators in
the application config so that they use RSpec instead of Minitest:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/application.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CashCats&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;
    &lt;span class="c1"&gt;# ...a bunch of other stuff.&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generators&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hidden_namespaces&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"test_unit"&lt;/span&gt;
      &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;test_framework&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;fixture: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fixture_replacement&lt;/span&gt; &lt;span class="ss"&gt;:factory_girl&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="c1"&gt;# blah blah blah more stuff.&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we run a generator that creates a test, it will use RSpec and
FactoryGirl instead of Minitest and fixtures. Additionally, we hide the
&lt;code&gt;test_unit&lt;/code&gt; generator namespace so that it doesn&amp;rsquo;t muddy up the help menu output
when &lt;code&gt;rails g&lt;/code&gt; is run without any arguments. :grapes::tada:&lt;/p&gt;

&lt;h3&gt;Drive Straight to Town on Rails of Ruby&lt;/h3&gt;

&lt;p&gt;To test-drive this cat party, we will write out a handful of feature specs, then
work on getting them to pass. A method I have found helpful when working with a
fairly well-defined set of features is to write out a number of them ahead of
time using placeholder specs. This acts both as a todo list of sorts, as well as
an indicator of progress. I also find that it  helps me to keep a high-level
picture of the current application component in mind. Your mileage may vary,
etc., etc., &lt;code&gt;[insert other disclaimers and anti-troll bait here]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s make two feature groups:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails g rspec:feature login_and_authentication
&lt;span class="gp"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rails g rspec:feature recording_munny
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;and add a handful of specs to them:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/features/login_and_authentication&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rails_helper'&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;feature&lt;/span&gt; &lt;span class="s2"&gt;"Login And Authentication"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :feature&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'can register for an account'&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'after creating an account'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'can log into my account'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# spec/features/recording_munnies&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rails_helper'&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;feature&lt;/span&gt; &lt;span class="s2"&gt;"Recording Munnies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :feature&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'when logged in'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'can add munny to my total and show it off on my profile'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may notice that the format of these specs &lt;em&gt;fairly&lt;/em&gt; closely matches the
format of the user stories. This is intentional: the goal is to map the specs
back to the stories as closely as possible. Running &lt;code&gt;rake&lt;/code&gt; should now display
three pending specs.&lt;/p&gt;

&lt;h3&gt;Speed Up This Train&lt;/h3&gt;

&lt;p&gt;With our mini feature suite in place, we are just about ready to drive full
speed ahead toward Internet-dominating MVP-dom. But first, let&amp;rsquo;s stop and make
one final improvement to our test cycle. Running &lt;code&gt;rake&lt;/code&gt; manually is great and
all, but wouldn&amp;rsquo;t it be more awesomer if we could automate that a bit? Let&amp;rsquo;s add
&lt;code&gt;guard-rspec&lt;/code&gt; to the mix to do just that:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Gemfile&lt;/span&gt;
&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'guard'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'guard-rspec'&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now bundle, initialize the Guard gem, and start it up:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;bundle
&lt;span class="gp"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;guard init
&lt;span class="gp"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;guard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all goes as expected, saving a spec file should now trigger a test run for
only that file. Keep in mind that this works only for files suffixed with
&lt;code&gt;_spec&lt;/code&gt;, which is the default for generated specs. Give it a try by opening up
one of the two feature spec files and saving it. There are a number of other
settings that can be tweaked in Guard to make it focus failed tests, use Spring,
etc., but we will skip those features for the sake of this walkthrough.&lt;/p&gt;

&lt;h2&gt;Holy Moly WOW Let&amp;rsquo;s Build The Whole Thing Now&lt;/h2&gt;

&lt;h3&gt;NOT SO FAST.&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s it for the first part of this blog series.  In the follow-up to this post,
we&amp;rsquo;ll go about implementing the actual code to get these feature specs passing.
There&amp;rsquo;s technically enough in place at this point to allow one to fly off into
:computer:The Future:computer: on :train2:Rails of Glory:pray: or something,
BDDing straight to the top of :mount_fuji:Mount Conversion
Rate:sunrise_over_mountains:. You may want to tackle this as a personal
challenge, out of impatience, or for any number of reasons, really. Otherwise,
drop by again in the next week or two to see everything come together.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Drinking The Koolixir (Part 2) - EPERs Creepers, The Erlang Toolkit!</title>
    <link rel="alternate" href="http://blog.url.com/2015/03/04/drinking-the-koolixir-part-2-epers-creepers-the-erlang-toolkit.html"/>
    <id>http://blog.url.com/2015/03/04/drinking-the-koolixir-part-2-epers-creepers-the-erlang-toolkit.html</id>
    <published>2015-03-03T16:00:00-08:00</published>
    <updated>2015-08-08T09:34:29-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;To get a better handle on Erlang&amp;rsquo;s behavior, I decided to install a popular set
of tools for debugging and performance profiling: EPER. I &lt;em&gt;think&lt;/em&gt; it stands for
&amp;ldquo;Erlang PERformance tools&amp;rdquo;, but it could also mean &amp;ldquo;Everything Proves Erlang
Rules&amp;rdquo; or &amp;ldquo;Egrets Prefer to Eat Robots&amp;rdquo; or really anything for that matter. One
thing is for certain, however: getting these tools built and running on Mac OS X
was fraught with :fire:danger:fire: and :boom: build errors. :boom:.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2&gt;Running the Test Suit&lt;/h2&gt;

&lt;p&gt;Before I got down to the business of trying to &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make install&lt;/code&gt; EPER,
it made sense to run &lt;code&gt;make test&lt;/code&gt; to ensure everything was in working order. Why
start there? I don&amp;rsquo;t know, I guess I :heart: tests or something. Maybe I was
abandoned as a child with a tribe of poorly tested hunter-gatherers, so I HAVE
TO CONFIRM STABILITY BEFORE CODING. Who knows?! :tired_face: Seemed like a
decent way to figure out how the system ticks, and learn a little more about how
the pieces of the Erlang environment fit together.&lt;/p&gt;

&lt;h2&gt;Problems Arise&lt;/h2&gt;

&lt;h3&gt;EPMD&lt;/h3&gt;

&lt;p&gt;Le duh. Right off the bat, I ran into issues with &lt;code&gt;eunit&lt;/code&gt; tests not passing.
Specifically, the first run of &lt;code&gt;make test&lt;/code&gt; yielded the following:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;=&lt;/span&gt;INFO &lt;span class="nv"&gt;REPORT&lt;/span&gt;&lt;span class="o"&gt;====&lt;/span&gt; 4-Mar-2015::19:05:02 &lt;span class="o"&gt;===&lt;/span&gt;
Protocol: &lt;span class="s2"&gt;"inet_tcp"&lt;/span&gt;: register/listen error: econnrefused
prfDog: t0_test &lt;span class="o"&gt;(&lt;/span&gt;module &lt;span class="s1"&gt;'prfDog'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;...&lt;span class="k"&gt;*&lt;/span&gt;failed&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;in function &lt;/span&gt;prfHost:assert_proxy/1 &lt;span class="o"&gt;(&lt;/span&gt;src/prfHost.erl, line 67&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;in &lt;/span&gt;call from prfHost:start/4 &lt;span class="o"&gt;(&lt;/span&gt;src/prfHost.erl, line 26&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;in &lt;/span&gt;call from prfDog:t0_test/0 &lt;span class="o"&gt;(&lt;/span&gt;src/prfDog.erl, line 178&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt;no_proxy,nonode@nohost&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The solution? Start &lt;code&gt;epmd&lt;/code&gt; in &amp;ldquo;daemon&amp;rdquo; mode:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;epmd -daemon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That solved the issue, but does raise some more questions. Like: What the heck
is &lt;code&gt;epmd&lt;/code&gt;? How do I manage this service on a Mac? Is it &lt;code&gt;lunchy&lt;/code&gt; compatible?
&lt;code&gt;launchd&lt;/code&gt;? &lt;code&gt;initctl&lt;/code&gt;?  CAN I JUST SHOUT AT IT. Will definitely be digging deeper
into &lt;code&gt;epmd&lt;/code&gt; in a future post. For now, we march onward through Error Canyon.&lt;/p&gt;

&lt;h3&gt;GTKNode&lt;/h3&gt;

&lt;p&gt;The installation process next failed because &lt;code&gt;gperfGtk&lt;/code&gt; claims it is missing
something:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;src/gperfGtk.erl:386: Warning: gperfGtk:g/1 calls undefined &lt;span class="k"&gt;function &lt;/span&gt;gtknode:cmd/2 &lt;span class="o"&gt;(&lt;/span&gt;Xref&lt;span class="o"&gt;)&lt;/span&gt;
src/gperfGtk.erl:37: Warning: gperfGtk:init/0 calls undefined &lt;span class="k"&gt;function &lt;/span&gt;gtknode:start/1 &lt;span class="o"&gt;(&lt;/span&gt;Xref&lt;span class="o"&gt;)&lt;/span&gt;
src/sherk.erl:567: Warning: sherk:g/1 calls undefined &lt;span class="k"&gt;function &lt;/span&gt;gtknode:cmd/2 &lt;span class="o"&gt;(&lt;/span&gt;Xref&lt;span class="o"&gt;)&lt;/span&gt;
src/sherk.erl:56: Warning: sherk:init/0 calls undefined &lt;span class="k"&gt;function &lt;/span&gt;gtknode:start/1 &lt;span class="o"&gt;(&lt;/span&gt;Xref&lt;span class="o"&gt;)&lt;/span&gt;
ERROR: xref failed &lt;span class="k"&gt;while &lt;/span&gt;processing /Users/BTidwellGrio/Code/elx_workspace/eper: rebar_abort
make: &lt;span class="k"&gt;***&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;xref] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A little Garggling turned up the fact that &lt;code&gt;gtknode&lt;/code&gt; is an OSS Erlang library
for mapping to the popular UI library, GTK. I pulled down &lt;a href="https://github.com/massemanet/gtknode"&gt;the
repo&lt;/a&gt;, and after a little more digging,
found the command for building and installing it:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aclocal ; autoconf ; automake ; ./configure --prefix=/your/cool/prefix ; make ; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the prefix here, I personally like to keep all of my shell/library Erlang in
a &lt;code&gt;.erllib&lt;/code&gt; folder in my home directory. I track a couple of helper files in the
same folder in a dotfiles repo, and ignore the build output of all the remaining
libraries.&lt;/p&gt;

&lt;p&gt;The first run of the &lt;code&gt;gtknode&lt;/code&gt; build exited with:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Checking for GTK... no
configure: error: Package requirements (gmodule-2.0 libglade-2.0 gtk+-2.0,
gdk-pixbuf-2.0) were not met:

Package 'libxml-2.0', required by 'libglade-2.0', not found

Consider adjusting the PKG_CONFIG_PATH environment variable if you
installed software in a non-standard prefix.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This story checks out; one can fairly safely assume that a library named
&lt;code&gt;gtkWHATEVER&lt;/code&gt; will, in fact, need some other thing called &lt;code&gt;GTK&lt;/code&gt;. The &lt;code&gt;README&lt;/code&gt;
for &lt;code&gt;gtknode&lt;/code&gt; encourages the use of Homebrew to install &lt;code&gt;glade&lt;/code&gt; (amongst myriad
other things). This first required adding the X11 homebrew tap. Additionally, a
couple more runs of the build script revealed a dependency on XQuart, which is
easily managed using Homebrew Cask. As I had never used Cask up to this point, I
have included it in the installation steps below:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew tap homebrew/x11
brew install glade fontconfig freetype libpng
brew install caskroom/cask/brew-cask
brew cask doctor # This triggers a sudo prompt to configure needed directories
brew cask install xquartz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we installed &lt;code&gt;glade&lt;/code&gt; and some of the other libraries using Homebrew,
running another build will result in &lt;code&gt;&amp;quot;Package &amp;#39;xcb-shm&amp;#39;, required by &amp;#39;cairo&amp;#39;,
not found&amp;quot;&lt;/code&gt; (or any number of other &lt;code&gt;&amp;quot;[Package] not found&amp;quot;&lt;/code&gt; errors). I am not
completely familiar with &lt;code&gt;pkg-config&lt;/code&gt;, but it seems the gist of the problem is
that Homebrew installs binaries and libraries in non-default locations (at least
from a Linux perspective). This can be fixed by exporting the &lt;code&gt;pkgconfig&lt;/code&gt;
environment variable*:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PKG_CONFIG_PATH=/usr/local/opt/libxml2/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*&lt;em&gt;This lovely bit of minutiae comes courtesy of a completely unrelated page in
the &lt;a href="https://github.com/Automattic/node-canvas/wiki/Installation---OSX"&gt;node-canvas Wiki&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With all this in place, &lt;code&gt;gtknode&lt;/code&gt; should compile, and &lt;code&gt;make test&lt;/code&gt; from the
&lt;code&gt;eper&lt;/code&gt; project root should pass. Then, the EPER project can be built using the
same tune as &lt;code&gt;gtknode&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aclocal ; autoconf ; automake ; ./configure --prefix=/your/cool/prefix ; make ; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Then What?&lt;/h2&gt;

&lt;p&gt;Now that these libraries are compiled and installed using the prefix we provided
earlier, we can add them to the Erlang shell using the &lt;code&gt;ERL_LIBS&lt;/code&gt; environment
variable. If you used the same convention stated here (i.e. &lt;code&gt;.erllib&lt;/code&gt; in the
home directory), then this variable should look like the following:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export ERL_LIBS="$HOME/.erllib/lib/erlang/lib"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On startup, the Erlang shell will load any source code in the &lt;code&gt;ebin&lt;/code&gt; directory
of any libraries contained under the &lt;code&gt;ERL_LIBS&lt;/code&gt; directory. If you refresh this
environment variable and then run &lt;code&gt;erl&lt;/code&gt; from the command-line, you should be
able to sanity-check installation of EPER by running &lt;code&gt;redbug:help().&lt;/code&gt; inside the
Erlang shell. This should output a list of methods supported by Redbug.&lt;/p&gt;

&lt;p&gt;With this in place, I feel like I can move forward with learning Erlang in a
much more disciplined way. Now, when something goes wrong deep in the depths of
some wacky Erlang function, I can do some code spelunking courtesy of &lt;code&gt;redbug&lt;/code&gt;
instead of being all like, &amp;ldquo;Hey Erlang, WHAT UP IN THERE YO like maybe you
could JUST START WORKING NOW.&amp;rdquo; I may follow-up with a dedicated post
on redbug or just interweave it with future blog posts, but either way you can
expect to see more about proper &lt;code&gt;redbug&lt;/code&gt; usage here on my blarg.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Drinking The Koolixir (Part 1)</title>
    <link rel="alternate" href="http://blog.url.com/2015/02/07/drinking-the-koolixir.html"/>
    <id>http://blog.url.com/2015/02/07/drinking-the-koolixir.html</id>
    <published>2015-02-06T18:18:00-08:00</published>
    <updated>2015-08-20T22:03:57-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In case you haven&amp;rsquo;t yet heard of it yet, Elixir is a functional programming
language (technically, a collection of macros) written in Erlang. I have been
persuaded to add it to my technical repertoire due to a good amount of recent
buzz in the blogosphere (as well as some points I&amp;rsquo;ll get to later). To make sure
I have a strong foundation for my Elixir learning experience, I am starting my
adventure with a foray into the underlying syntax of Erlang.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div style="text-align: center"&gt;
  &lt;h2&gt;Part 1&lt;/h2&gt;
  &lt;h5&gt;First Impressions with Erlang&lt;/h5&gt;
  &lt;h5&gt;&amp;ndash;or&amp;ndash;&lt;/h5&gt;
  &lt;h5&gt;
    &lt;i&gt;Taking Apart the Car To Learn How to Drive&lt;/i&gt;
  &lt;/h5&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;
Yes, functional programming: Land of Lambdas and Bindings and Parenthesis and
you&amp;rsquo;re all like &lt;code&gt;(where(am(I(will)(I)(ever)(return)?)!)1)&lt;/code&gt; and so-forth. To be
fair, my only formal experience with FP was a short section in a programming
languages course in college (&lt;em&gt;unless you count Javascript?&lt;/em&gt;&amp;thinsp;) that gave
me probably just enough time to learn how to recursively crash my LISP
interpreter. Even that was sufficient to give me the impression that functional
programming was something that all Serious Programmers should learn during their
Careers as Professionals.&lt;/p&gt;

&lt;p&gt;I actually started out wanting to learn Elixir because of some impressive
benchmarks I read about &lt;a href="https://github.com/mroth/phoenix-showdown"&gt;over here&lt;/a&gt;.
&lt;strong&gt;tldr;&lt;/strong&gt; Phoenix pwns all yes even Node.js &lt;em&gt;and&lt;/em&gt; I&amp;rsquo;m pretty sure you still get
Hipster Cred for writing in Elixir, yey!&lt;/p&gt;

&lt;p&gt;Naturally, I was all like, &amp;ldquo;I want to &lt;strike&gt;be a hipster&lt;/strike&gt; write fast
APIs!&amp;rdquo; so I set out straightaway to install Elixir (&lt;em&gt;using Homebrew, no
doy&lt;/em&gt;&amp;thinsp;), started hacking away all furiously (&lt;em&gt;a Sublime Text syntax
package! and a framework! and package managers! and the author like, wrote Ruby!
and I write Ruby!&lt;/em&gt;&amp;thinsp;) only to realize pretty quickly that I was going to
be at something of a disadvantage if I didn&amp;rsquo;t learn at least &lt;em&gt;some&lt;/em&gt; Erlang.&lt;/p&gt;

&lt;p&gt;At the very least, I started imagining all the
&lt;span style="font-family: monospace; font-size: 14px"&gt;&amp;#9679;&amp;Delta;True&amp;nbsp;Hipster&amp;nbsp;Programmers&amp;Delta;&amp;#9679;&lt;/span&gt;
calling me out. &amp;ldquo;You write Elixir but you&amp;rsquo;ve never even written Erlang DIE
TRYHARD POSEUR SCUM PEW PEW PEW!&amp;rdquo; (&lt;em&gt;Fun Fact: Hipster Programmers spontaneously
emit lasers upon the unworthy.&lt;/em&gt;)There was also the fact that all of the good
debuggers and tooling and whatnot were written with Erlang in mind. Also, I&amp;rsquo;m a
sucker for a knowledge.&lt;/p&gt;

&lt;div class="image-wrapper"&gt;
  &lt;img alt="A space cat obliterating a planet of unworthy programmers writing at an unacceptable level of abstraction"
       src="/articles/hipster_programmer_cat.jpg" /&gt;
  &lt;blockquote&gt;
    &amp;ldquo;Oh what&amp;rsquo;s that ur &amp;lsquo;getting around&amp;rsquo; to learning assembly PEW PEW PEW I CANT
    HEER U UR DEAD&amp;rdquo;
  &lt;/blockquote&gt;
&lt;/div&gt;

&lt;p&gt;So here I be.&lt;/p&gt;

&lt;h3&gt;But Wait, Why Learn &amp;ldquo;Tonic&amp;rdquo;&amp;hellip;er&amp;hellip;whatever?&lt;/h3&gt;

&lt;p&gt;I blame college for biasing me, but something about functional programming
really does feel like The One True Way. I can remember writing my first few
recursive algorithms and feeling like &amp;ldquo;YES THIS IS IT I AM DOING PROGRAMMING.&amp;rdquo;
So, yeah, that&amp;rsquo;s a big plus: it just &lt;em&gt;feels&lt;/em&gt; so much more computer sciency to me
(this may or may not proverbially light your proverbial fire). I can say that I
am legitimately excited to learn a new language for the first time in years, and
that excitement will go a long way toward conquering a potentially powerful new
tool.&lt;/p&gt;

&lt;p&gt;That being said, there are also some &amp;ldquo;serious&amp;rdquo; reasons why I chose to learn
Erlang/Elixir. By far the most important of these reasons is that Erlang touts
concurrency and fault-tolerance as being core benefits of the language and the
accompanying BEAM VM. Given the current push in the tech industry for
increasingly real-time, highly concurrent applications (read: wearables sending
tons of data back to the mothership), I think this is an area in which it is
worth building expertise. Put another way, I believe levels of concurrency that
were once only the concern of massive corporate giants will become a concern for
more wearable/IoT startups.&lt;/p&gt;

&lt;p&gt;In addition to all this, Elixir was created by Jos&amp;eacute; Valim, a basically
kick-ass developer who co-founded his own consultancy, was the core developer of
the Devise authentication gem (and who knows what else), and just generally eats
Ruby and code for breakfast. What this means for Elixir is that it is very much
influenced by Ruby&amp;rsquo;s syntax, making my own transition (as a Ruby developer) that
much more enjoyable. Furthermore, Valim clearly knows how to carry a project, so
Elixir is very likely to be well-maintained.&lt;/p&gt;

&lt;h2&gt;The Jourlang Begins&lt;/h2&gt;

&lt;p&gt;I remembered reading over on Hacker News about a book on Erlang with a
particularly clever title: &lt;a href="http://learnyousomeerlang.com/"&gt;&amp;ldquo;Learn You Some Erlang For Great
Good&amp;rdquo;&lt;/a&gt; (written in the spirit of &amp;ldquo;Learn You a
Haskell For Great Good&amp;rdquo; SUCH FUNNY).&lt;/p&gt;

&lt;div class="image-wrapper"&gt;
  &lt;img src="/articles/IMG_1100.PNG"
       alt="A mustachioed octopus on the cover of 'Learn You Some Erlang For Great Good', the riveting tale of a tremendously talented mollusk functional programming practitioner" /&gt;
  &lt;blockquote&gt;
    A mustachioed octopus on the cover of &amp;lsquo;Learn You Some Erlang For Great Good&amp;rsquo;,
    the riveting tale of a tremendously talented mollusk functional programming
    practitioner
  &lt;/blockquote&gt;
&lt;/div&gt;

&lt;p&gt;At the time, Erlang didn&amp;rsquo;t really mean much to me, other than I knew there was
some vague connection between Elixir and Erlang, and less-so between Haskell and
Erlang. BUT since I had always wanted to Crush It Hard with FP, I made a mental
note to go back to the book when the time was right. After reading about the
Phoenix API Mega Hi-Score, I decided the time was indeed right.&lt;/p&gt;

&lt;p&gt;As of this post, I am about a quarter of the way through the book, having
covered syntax, types, and recursion. With some justification for learning
Elixir specifically, I will breaking out my experience with Erlang into upcoming
blog posts. Specifically, I will cover how I set up my machine for Erlang and
Elixir development (tools, editor plugins, etc.), some thoughts on pros, cons,
and oddities of the language and framework, and finally a walkthrough of a
yet-to-be-determined First Application in Elixir. Assuming, of course, that I
don&amp;rsquo;t fall into some kind of &lt;a href="/2015/02/07/drinking-the-koolixir.html"&gt;infinite recursion&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ember Rails CSRF Handling</title>
    <link rel="alternate" href="http://blog.url.com/2015/01/27/ember-rails-csrf-handling.html"/>
    <id>http://blog.url.com/2015/01/27/ember-rails-csrf-handling.html</id>
    <published>2015-01-26T23:24:00-08:00</published>
    <updated>2015-02-17T22:01:13-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;To get some more practice with my new Vim + Tmux setup (a topic unto itself, I might add), I ran back through the Ember JS &amp;ldquo;Getting Started&amp;rdquo; guide and wired it to a simple Rails back-end. However, I wanted to adhere to a strict SPA/API architecture, and ran into some CSRF issues as a result.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: Imagine my surprise when I tried to do some more Googling related to this topic and this very blog post showed up within the first few results a few times. I would like to add, as a Good Internet Citizen, that I am not a security expert, just a security advocate. This is a work in progress, so there is very likely some room for improvement. Specifically, StackOverflow tells me that &lt;a href="http://stackoverflow.com/a/15056471"&gt;&amp;ldquo;passing the CSRF token through the API for login is a particularly bad practice&amp;rdquo;&lt;/a&gt;. I will be personally confirming whether this applies to the approach outlined below and update accordingly.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;To protect against CSRF attacks, Rails generates an authenticity token for each form submission. If the token isn&amp;rsquo;t present, the request is rejected. This works great for apps that are served up by the Rails app (since said token is available as a meta-tag on the hosting page), but things start to get a little trickier when your single-page app is decoupled from the Rails server (say with something like an S3-oriented deployment, or Divshot). In this scenario, you have to write some custom glue code to ensure the SPA is able to retrieve and then provide the token on each request, and, likewise, to ensure the Rails app checks for it in the correct way. There are plenty of SO threads and blog posts available covering CSRF handling for SPAs, but they all seem to focus on Angular JS, and even then, only cover part of the total solution. I wound up stitching together resources from a handful of locations to get a CSRF fix for Ember that I was satisfied with.&lt;/p&gt;

&lt;h2&gt;Server Side Glue&lt;/h2&gt;

&lt;p&gt;The Angular JS docs make a &lt;a href="https://docs.angularjs.org/api/ng/service/$http#cross-site-request-forgery-xsrf-protection"&gt;suggestion&lt;/a&gt; which prompted &lt;a href="http://stackoverflow.com/questions/14734243/rails-csrf-protection-angular-js-protect-from-forgery-makes-me-to-log-out-on/15761835#15761835"&gt;this response posted to SO by HyungYuHei&lt;/a&gt;. I&amp;rsquo;ve included the relevant snippet below for completeness:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/application_controller.rb&lt;/span&gt;

&lt;span class="c1"&gt;# Turn on request forgery protection&lt;/span&gt;
&lt;span class="n"&gt;protect_from_forgery&lt;/span&gt;

&lt;span class="n"&gt;after_filter&lt;/span&gt; &lt;span class="ss"&gt;:set_csrf_cookie&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_csrf_cookie&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'XSRF-TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form_authenticity_token&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;protect_against_forgery?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="kp"&gt;protected&lt;/span&gt;

  &lt;span class="c1"&gt;# In Rails 4.2 and above&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verified_request?&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;valid_authenticity_token?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'X-XSRF-TOKEN'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets the authenticity token as a cookie, and then checks for it in the headers on every request. The snippet worked flawlessly, and provided a great starting point for integrating the front-end of this exercise and Everything Was Amazing&amp;trade;.&lt;/p&gt;

&lt;h2&gt;Front End Goop&lt;/h2&gt;

&lt;p&gt;The next step is to configure the Ember app to snag the authenticity token out of the cookies and send it with each API request. Unfortunately, as mentioned, the SO thread only covers Angular JS. This left me to dig through the Ember JS docs for a bit, before coming upon &lt;a href="http://emberjs.com/api/data/classes/DS.RESTAdapter.html"&gt;this entry&lt;/a&gt;. Toward the bottom is a section on customizing request headers. To this effect, I added the following to &lt;code&gt;adapters/application.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;DS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ActiveModelAdapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'api'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"X-XSRF-TOKEN"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/XSRF&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;TOKEN&lt;/span&gt;&lt;span class="se"&gt;\=([^&lt;/span&gt;&lt;span class="sr"&gt;;&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="kr"&gt;volatile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Ultimate Victory&lt;/h2&gt;

&lt;p&gt;So, la la la, everything was great, and I rode off into the sunset, OKAY BUT NO, SERIOUSLY, why was I still getting &lt;code&gt;Invalid Authenticity Token: U SUCK&lt;/code&gt; error messages?&lt;/p&gt;

&lt;h3&gt;Okay, So Not So Ultimate&lt;/h3&gt;

&lt;p&gt;And thank goodness, because this wouldn&amp;rsquo;t be much of a blog post without a plot twist at the end where The Developer has to wrestle a flaming error message to the ground with their bare hands. So, I mounted my trusty steed or laptop or whatever, and like, opened up my Developer Tools in Chrome. And I was like &amp;ldquo;Show thy Lizard Face, that I may smite it.&amp;rdquo; And The Foul Cookie Dragon of the Resources Tab was all like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;R8xp3FN5QrlQM12GLb28f6%2BtPsYkcYYNfRsYQ3q5ryq%2Bx387750%2BHI%2FCxVUrjZDCiX4eIL63V4BF4NcA7eLddg%3D%3D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I said unto the dragon, &amp;ldquo;Wow, you must be blast at parties&amp;rdquo; or maybe it was like &amp;ldquo;Now Dragon, use your words.&amp;rdquo; but actually I was like WAIT A MINUTE DRAGON what&amp;rsquo;s with all that URL encoded mess you said toward the end there? that seems pretty important, I bet. And wouldn&amp;rsquo;t you know it, that dragon solved the mystery. So I changed:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"X-XSRF-TOKEN"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/XSRF&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;TOKEN&lt;/span&gt;&lt;span class="se"&gt;\=([^&lt;/span&gt;&lt;span class="sr"&gt;;&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to&amp;hellip;&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"X-XSRF-TOKEN"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Ember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/XSRF&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;TOKEN&lt;/span&gt;&lt;span class="se"&gt;\=([^&lt;/span&gt;&lt;span class="sr"&gt;;&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;YES! decodeURIComponent!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And the dragon was all like, &amp;ldquo;Geez, dude, you have no idea how hard is to talk in percent signs and stuff all the time, thanks for URI decoding me.&amp;rdquo; And there was peace and API integration throughout the land FOREVER AND EVER HAPPILY EVER AFTER.&lt;/p&gt;

&lt;h1&gt;THE END&lt;/h1&gt;
</content>
  </entry>
</feed>
